package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.37

import (
	"context"
	"errors"
	"fmt"

	"crispypod.com/crispypod/db"
	"crispypod.com/crispypod/graph/model"
	"crispypod.com/crispypod/helpers"
	"crispypod.com/crispypod/models"
)

// CreateEpisode is the resolver for the createEpisode field.
func (r *mutationResolver) CreateEpisode(ctx context.Context, input *model.NewEpisode) (*model.Episode, error) {
	panic(fmt.Errorf("not implemented: CreateEpisode - createEpisode"))
}

// ModifyEpisode is the resolver for the modifyEpisode field.
func (r *mutationResolver) ModifyEpisode(ctx context.Context, id string, data *model.NewEpisode) (*model.Episode, error) {
	panic(fmt.Errorf("not implemented: ModifyEpisode - modifyEpisode"))
}

// Episodes is the resolver for the episodes field.
func (r *queryResolver) Episodes(ctx context.Context, pagination *model.Pagination) ([]*model.Episode, error) {
	var episodes []models.Episode
	var rtEpisodes []*model.Episode
	if userName := helpers.JWTFromContext(ctx); len(userName) == 0 {
		err := db.DB.Model(models.Episode{EpisodeStatus: models.EpisodeStatus_Published}).
			Scopes(helpers.Paginate(*pagination.PageIndex, *pagination.PerPage)).
			Find(&episodes).Error
		if err != nil {
			return nil, errors.New("episodes not found")
		}
	} else {
		if err := db.DB.Scopes(helpers.Paginate(*pagination.PageIndex, *pagination.PerPage)).Find(&episodes).Error; err != nil {
			return nil, errors.New("episodes not found")
		}
	}
	// Convert
	for _, e := range episodes {
		pt := new(int)
		*pt = int(e.PublishTime.Unix())
		rtEpisodes = append(rtEpisodes, &model.Episode{
			ID:                  e.ID.String(),
			Title:               e.Title,
			CreateTime:          int(e.CreateTime),
			Description:         e.Description,
			PublishTime:         pt,
			ThumbnailFileName:   &e.ThumbnailFileName.String,
			ThumbnailUploadName: &e.ThumbnailUploadName.String,
			AudioFileName:       &e.AudioFileName.String,
			AudioFileUploadName: &e.AudioFileUploadName.String,
			// AudioFileDuration:   e.AudioFileDuration.Int64,
		})
	}
	return rtEpisodes, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, pagination *model.Pagination) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// Login is the resolver for the login field.
func (r *queryResolver) Login(ctx context.Context, credential *model.Credential) (*model.LoginData, error) {
	var user models.User
	if err := db.DB.Model(models.User{UserName: credential.UserName}).First(&user).Error; err != nil {
		return nil, errors.New("user with provided credentials not found")
	}
	if helpers.CheckPasswordHash(credential.Password, user.Password) {
		token, _ := helpers.GenerateJwt(user.UserName)
		return &model.LoginData{
			Token: token,
		}, nil
	}
	return nil, errors.New("user with provided credentials not found")
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
