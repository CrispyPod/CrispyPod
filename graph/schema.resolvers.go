package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.37

import (
	"context"
	"errors"
	"fmt"

	"crispypod.com/crispypod/graph/model"
	"crispypod.com/crispypod/helpers"
)

// CreateEpisode is the resolver for the createEpisode field.
func (r *mutationResolver) CreateEpisode(ctx context.Context, input *model.NewEpisode) (*model.Episode, error) {
	panic(fmt.Errorf("not implemented: CreateEpisode - createEpisode"))
}

// ModifyEpisode is the resolver for the modifyEpisode field.
func (r *mutationResolver) ModifyEpisode(ctx context.Context, id string, data *model.NewEpisode) (*model.Episode, error) {
	panic(fmt.Errorf("not implemented: ModifyEpisode - modifyEpisode"))
}

// Episodes is the resolver for the episodes field.
func (r *queryResolver) Episodes(ctx context.Context, pagination *model.Pagination) ([]*model.Episode, error) {
	if userName := helpers.JWTFromContext(ctx); len(userName) == 0 {
		return nil, errors.New("not authorized")
	}
	panic(fmt.Errorf("not implemented: Episodes - episodes"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, pagination *model.Pagination) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// Login is the resolver for the login field.
func (r *queryResolver) Login(ctx context.Context, credential *model.Credential) (string, error) {
	panic(fmt.Errorf("not implemented: Login - login"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
